apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'signing'

repositories {
    mavenCentral()
}
configurations {
    all*.exclude module : 'spring-boot-starter-logging'
    providedCompile
}
//sourceSets.main.compileClasspath += configurations.providedCompile
//sourceSets.test.compileClasspath += configurations.providedCompile
//sourceSets.test.runtimeClasspath += configurations.providedCompile

dependencies {
    api 'com.google.guava:guava:33.2.1-jre'
    api 'org.apache.commons:commons-lang3:3.14.0'
    api 'org.freemarker:freemarker:2.3.32'
    api 'org.yaml:snakeyaml:2.0'
    api 'org.slf4j:slf4j-api:2.0.6'
//    api 'mysql:mysql-connector-java:8.0.25'
//    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:3.2.0'
    runtimeOnly 'org.postgresql:postgresql:42.7.3'
//    compileOnly 'org.projectlombok:lombok:1.18.30'
    compileOnly 'jakarta.annotation:jakarta.annotation-api:3.0.0-M1'
    api gradleApi()
    testImplementation 'junit:junit:4.13.2'
    testRuntimeOnly 'com.h2database:h2:2.2.224'
    // Can be removed after no javax support
    testImplementation 'jakarta.persistence:jakarta.persistence-api:3.2.0-M1'
//    testImplementation 'org.projectlombok:lombok:1.18.2'
    // Can be removed after no javax support
    testImplementation 'com.google.code.findbugs:jsr305:3.0.2'
    testImplementation 'jakarta.annotation:jakarta.annotation-api:3.0.0-M1'
}

sourceSets {
    main {
        java {
            exclude 'com/smartnews/jpa_entity_generator/maven/**'
        }
    }
}

test {
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        testLogging.showStandardStreams = true
    }
}
allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile).tap {
            configureEach {
                options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            }
        }
    }

    // http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html
    tasks.withType(Javadoc).tap {
        configureEach {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

tasks.register('javadocJar', Jar) {
    getArchiveClassifier().set('javadoc')
    from javadoc
}
tasks.register('sourcesJar', Jar) {
    getArchiveClassifier().set('sources')
    from sourceSets.main.allSource
}
artifacts {
    archives javadocJar, sourcesJar
}

